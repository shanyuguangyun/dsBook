(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{283:function(a,e,t){"use strict";t.r(e);var s=t(14),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序"}},[a._v("#")]),a._v(" 序")]),a._v(" "),e("p",[a._v("虽然入门的时候已经学过数据结构了，但是自从入了Web开发后，越来越少去关注这些东西了。工作中也基本就那几样，ArrayList、LinkedList、Map、Set、TreeMap等等好像也都能搞定，然后背背面试题，花点时间debug跟下源码，也基本够用够工作了")]),a._v(" "),e("p",[a._v("但是随着年限的增长以及工作的积累，慢慢看些中间件实现的书、或者接触些其他语言的编程，比如Redis常年在用，总得啃一两本书充充门面。不然一问三不知，消息队列、netty、序列化等等慢慢也接触到了偏底层的逻辑。恍然大悟原来每种中间件|语言都有自己的数据类型以及支持的一些序列化方式，随着用的东西越来越多，这种感觉越来越深。刚开始的时候可能就mysql java一遍撸后台，可能还加个会Redis CURD之类。慢慢的接触到像大数据Scala里面有些语言有二元组Truple、以及java和scale互相借鉴语法进步等等。stream流的map reduce等等语法，这些语言都在互相借鉴思想。同样，用的最多的Java序列化ObjectStream、或者用JSON做序列化。慢慢的可能接触到了protobuf等序列化方式。以及序列化时发现诶，这个语言里面没有BigDecimal，那个语言里都是叫Number等。以及后面逐渐用多了其他中间件、Nosql、各种各样的消息队列等等。他们可能用各种各样的语言实现的 比如Redis大部分用的C写的，kafka大部分用的Scala、RabbitMQ用的Erlang、RocketMQ用Java、甚至Nsq这种用GO写的。总之，这个年代感觉学编程各种各样的语言，每个语言有各种各样的一些特性，但是他们的数据结构其实是蛮适合学习了解的，这样学习各种各样的中间件以及慢慢的加深了解也还蛮不错的。")]),a._v(" "),e("p",[a._v("比如Redis设计与实现里，其实发现Redis的字符串实现方式按我们写Java的人理解来说，不就是String吗。 但是C语言其实还蛮麻烦的 - -！ ，Java里的字符串是final的char[]，但是Redis为了性能，更像是StringBuilder的实现，他自己定义的SDS结构，记录了字符串的长度，这样不用每次遍历字符数组获取长度了。以及他的扩容机制(我们搞Java的就知道ArrayList、HashMap扩容- -！毕竟八股文基础)，但其实Redis的SDS字符串也有扩容以及惰性释放空间，扩容包括像1M内每次扩容两倍，留一半做free[]，使得扩容次数从N次变为最多N次。大于1M的呢，每次扩容留出1M的free[]。这些机制其实想想还挺有意思的。同时，对Redis的Hash和Java的 Hash结构都是数组桶，但是实现上肯定还是有不同的。包括链表、跳跃表的实现。看看还蛮有意思的。")]),a._v(" "),e("p",[a._v("常用的无外乎数组、链表、以及数组|链表实现的栈、列表、以及Hash等线性数据结构和树、跳跃表等")]),a._v(" "),e("p",[a._v("网站")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("数据结构可视化"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);